{"ast":null,"code":"import _asyncToGenerator from \"/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as jose from 'node-jose';\nimport * as i0 from \"@angular/core\";\nexport class EncryptionService {\n  constructor() {}\n\n  encryptData(data, publicKeyString) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        let pemKey = _this.formatPublicKeyAsPEM(publicKeyString);\n\n        const key = yield _this.importPublicKey(pemKey);\n        const buffer = new TextEncoder().encode(JSON.stringify(data));\n        const encrypted = yield jose.JWE.createEncrypt({\n          format: 'compact',\n          fields: {\n            alg: 'RSA-OAEP-256',\n            enc: 'A256CBC-HS512' // Content encryption algorithm\n\n          }\n        }, key).update(buffer).final();\n        return encrypted;\n      } catch (error) {\n        console.error('Encryption failed:', error);\n        return '';\n      }\n    })();\n  }\n  /**\n   * add key to keystore\n   * @param pem\n   * @returns\n   */\n\n\n  importPublicKey(pem) {\n    return _asyncToGenerator(function* () {\n      const keystore = jose.JWK.createKeyStore();\n      return keystore.add(pem, 'pem');\n    })();\n  }\n  /**\n   * Formats Public Key to PEM\n   * @param publicKey\n   * @returns\n   */\n\n\n  formatPublicKeyAsPEM(publicKey) {\n    const pemHeader = '-----BEGIN PUBLIC KEY-----';\n    const pemFooter = '-----END PUBLIC KEY-----';\n    const normalizedKey = publicKey.replace(/^-----BEGIN PUBLIC KEY-----/, '').replace(/-----END PUBLIC KEY-----$/, '').trim();\n    return `${pemHeader}\\n${normalizedKey}\\n${pemFooter}`;\n  }\n\n}\n\nEncryptionService.ɵfac = function EncryptionService_Factory(t) {\n  return new (t || EncryptionService)();\n};\n\nEncryptionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EncryptionService,\n  factory: EncryptionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/src/app/services/encryption.service.ts"],"names":["jose","i0","EncryptionService","constructor","encryptData","data","publicKeyString","pemKey","formatPublicKeyAsPEM","key","importPublicKey","buffer","TextEncoder","encode","JSON","stringify","encrypted","JWE","createEncrypt","format","fields","alg","enc","update","final","error","console","pem","keystore","JWK","createKeyStore","add","publicKey","pemHeader","pemFooter","normalizedKey","replace","trim","ɵfac","EncryptionService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,GAAG,CAAG;;AACXC,EAAAA,WAAW,CAACC,IAAD,EAAOC,eAAP,EAAwB;AAAA;;AAAA;AACrC,UAAI;AACA,YAAIC,MAAM,GAAG,KAAI,CAACC,oBAAL,CAA0BF,eAA1B,CAAb;;AACA,cAAMG,GAAG,SAAS,KAAI,CAACC,eAAL,CAAqBH,MAArB,CAAlB;AACA,cAAMI,MAAM,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBC,IAAI,CAACC,SAAL,CAAeV,IAAf,CAAzB,CAAf;AACA,cAAMW,SAAS,SAAShB,IAAI,CAACiB,GAAL,CAASC,aAAT,CAAuB;AAC3CC,UAAAA,MAAM,EAAE,SADmC;AAE3CC,UAAAA,MAAM,EAAE;AACJC,YAAAA,GAAG,EAAE,cADD;AAEJC,YAAAA,GAAG,EAAE,eAFD,CAEkB;;AAFlB;AAFmC,SAAvB,EAMrBb,GANqB,EAOnBc,MAPmB,CAOZZ,MAPY,EAQnBa,KARmB,EAAxB;AASA,eAAOR,SAAP;AACH,OAdD,CAeA,OAAOS,KAAP,EAAc;AACVC,QAAAA,OAAO,CAACD,KAAR,CAAc,oBAAd,EAAoCA,KAApC;AACA,eAAO,EAAP;AACH;AAnBoC;AAoBxC;AACD;AACJ;AACA;AACA;AACA;;;AACUf,EAAAA,eAAe,CAACiB,GAAD,EAAM;AAAA;AACvB,YAAMC,QAAQ,GAAG5B,IAAI,CAAC6B,GAAL,CAASC,cAAT,EAAjB;AACA,aAAOF,QAAQ,CAACG,GAAT,CAAaJ,GAAb,EAAkB,KAAlB,CAAP;AAFuB;AAG1B;AACD;AACJ;AACA;AACA;AACA;;;AACInB,EAAAA,oBAAoB,CAACwB,SAAD,EAAY;AAC5B,UAAMC,SAAS,GAAG,4BAAlB;AACA,UAAMC,SAAS,GAAG,0BAAlB;AACA,UAAMC,aAAa,GAAGH,SAAS,CAC1BI,OADiB,CACT,6BADS,EACsB,EADtB,EAEjBA,OAFiB,CAET,2BAFS,EAEoB,EAFpB,EAGjBC,IAHiB,EAAtB;AAIA,WAAQ,GAAEJ,SAAU,KAAIE,aAAc,KAAID,SAAU,EAApD;AACH;;AA7C0B;;AA+C/BhC,iBAAiB,CAACoC,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAItC,iBAAV,GAAP;AAAwC,CAAzG;;AACAA,iBAAiB,CAACuC,KAAlB,GAA0B,aAAcxC,EAAE,CAACyC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzC,iBAAT;AAA4B0C,EAAAA,OAAO,EAAE1C,iBAAiB,CAACoC,IAAvD;AAA6DO,EAAAA,UAAU,EAAE;AAAzE,CAAtB,CAAxC","sourcesContent":["import * as jose from 'node-jose';\nimport * as i0 from \"@angular/core\";\nexport class EncryptionService {\n    constructor() { }\n    async encryptData(data, publicKeyString) {\n        try {\n            let pemKey = this.formatPublicKeyAsPEM(publicKeyString);\n            const key = await this.importPublicKey(pemKey);\n            const buffer = new TextEncoder().encode(JSON.stringify(data));\n            const encrypted = await jose.JWE.createEncrypt({\n                format: 'compact',\n                fields: {\n                    alg: 'RSA-OAEP-256',\n                    enc: 'A256CBC-HS512', // Content encryption algorithm\n                },\n            }, key)\n                .update(buffer)\n                .final();\n            return encrypted;\n        }\n        catch (error) {\n            console.error('Encryption failed:', error);\n            return '';\n        }\n    }\n    /**\n     * add key to keystore\n     * @param pem\n     * @returns\n     */\n    async importPublicKey(pem) {\n        const keystore = jose.JWK.createKeyStore();\n        return keystore.add(pem, 'pem');\n    }\n    /**\n     * Formats Public Key to PEM\n     * @param publicKey\n     * @returns\n     */\n    formatPublicKeyAsPEM(publicKey) {\n        const pemHeader = '-----BEGIN PUBLIC KEY-----';\n        const pemFooter = '-----END PUBLIC KEY-----';\n        const normalizedKey = publicKey\n            .replace(/^-----BEGIN PUBLIC KEY-----/, '')\n            .replace(/-----END PUBLIC KEY-----$/, '')\n            .trim();\n        return `${pemHeader}\\n${normalizedKey}\\n${pemFooter}`;\n    }\n}\nEncryptionService.ɵfac = function EncryptionService_Factory(t) { return new (t || EncryptionService)(); };\nEncryptionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EncryptionService, factory: EncryptionService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}