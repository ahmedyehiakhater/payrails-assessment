{"ast":null,"code":"import _asyncToGenerator from \"/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as jose from 'node-jose';\nimport * as i0 from \"@angular/core\";\nexport class EncryptionService {\n  encryptCreditCard(creditCardModel, publicKey) {\n    return _asyncToGenerator(function* () {\n      const key = yield jose.JWK.asKey(publicKey, 'pem', {\n        alg: 'RSA-OAEP-256',\n        enc: 'A256CBC-HS512'\n      });\n      const jwe = jose.JWE.createEncrypt({\n        format: 'compact',\n        fields: {\n          alg: 'RSA-OAEP-256',\n          enc: 'A256CBC-HS512'\n        }\n      }, key).update(JSON.stringify(creditCardModel)).final();\n      return jwe;\n    })();\n  }\n\n}\n\nEncryptionService.ɵfac = function EncryptionService_Factory(t) {\n  return new (t || EncryptionService)();\n};\n\nEncryptionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EncryptionService,\n  factory: EncryptionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/src/app/services/encryption.service.ts"],"names":["jose","i0","EncryptionService","encryptCreditCard","creditCardModel","publicKey","key","JWK","asKey","alg","enc","jwe","JWE","createEncrypt","format","fields","update","JSON","stringify","final","ɵfac","EncryptionService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AACrBC,EAAAA,iBAAiB,CAACC,eAAD,EAAkBC,SAAlB,EAA6B;AAAA;AAChD,YAAMC,GAAG,SAASN,IAAI,CAACO,GAAL,CAASC,KAAT,CAAeH,SAAf,EAA0B,KAA1B,EAAiC;AAAEI,QAAAA,GAAG,EAAE,cAAP;AAAuBC,QAAAA,GAAG,EAAE;AAA5B,OAAjC,CAAlB;AACA,YAAMC,GAAG,GAAGX,IAAI,CAACY,GAAL,CAASC,aAAT,CAAuB;AAAEC,QAAAA,MAAM,EAAE,SAAV;AAAqBC,QAAAA,MAAM,EAAE;AAAEN,UAAAA,GAAG,EAAE,cAAP;AAAuBC,UAAAA,GAAG,EAAE;AAA5B;AAA7B,OAAvB,EAAqGJ,GAArG,EACPU,MADO,CACAC,IAAI,CAACC,SAAL,CAAed,eAAf,CADA,EAEPe,KAFO,EAAZ;AAGA,aAAOR,GAAP;AALgD;AAMnD;;AAP0B;;AAS/BT,iBAAiB,CAACkB,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAIpB,iBAAV,GAAP;AAAwC,CAAzG;;AACAA,iBAAiB,CAACqB,KAAlB,GAA0B,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvB,iBAAT;AAA4BwB,EAAAA,OAAO,EAAExB,iBAAiB,CAACkB,IAAvD;AAA6DO,EAAAA,UAAU,EAAE;AAAzE,CAAtB,CAAxC","sourcesContent":["import * as jose from 'node-jose';\nimport * as i0 from \"@angular/core\";\nexport class EncryptionService {\n    async encryptCreditCard(creditCardModel, publicKey) {\n        const key = await jose.JWK.asKey(publicKey, 'pem', { alg: 'RSA-OAEP-256', enc: 'A256CBC-HS512' });\n        const jwe = jose.JWE.createEncrypt({ format: 'compact', fields: { alg: 'RSA-OAEP-256', enc: 'A256CBC-HS512' } }, key)\n            .update(JSON.stringify(creditCardModel))\n            .final();\n        return jwe;\n    }\n}\nEncryptionService.ɵfac = function EncryptionService_Factory(t) { return new (t || EncryptionService)(); };\nEncryptionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EncryptionService, factory: EncryptionService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}