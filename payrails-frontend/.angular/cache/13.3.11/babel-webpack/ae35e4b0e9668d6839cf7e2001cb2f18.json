{"ast":null,"code":"import _asyncToGenerator from \"/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class EncryptionService {\n  constructor() {}\n\n  encryptCreditCard(creditCardModel, publicKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Import the public key for encryption\n      const cryptoKey = yield _this.importKey(publicKey); // Encode the credit card model as a JSON string and convert it to a Uint8Array\n\n      const encodedText = new TextEncoder().encode(JSON.stringify(creditCardModel)); // Encrypt the data using the RSA-OAEP algorithm\n\n      const encryptedData = yield crypto.subtle.encrypt({\n        name: 'RSA-OAEP'\n      }, cryptoKey, encodedText); // Convert the encrypted data to a base64-encoded string\n\n      return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n    })();\n  } // Import the public key for encryption\n\n\n  importKey(publicKey) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Convert the base64-encoded public key to an ArrayBuffer\n      const keyBuffer = yield crypto.subtle.importKey('spki', _this2.base64ToArrayBuffer(publicKey), {\n        name: 'RSA-OAEP',\n        hash: 'SHA-256'\n      }, true, ['encrypt']);\n      return keyBuffer;\n    })();\n  } // Convert a base64-encoded string to an ArrayBuffer\n\n\n  base64ToArrayBuffer(base64) {\n    const binaryString = window.atob(base64);\n    const len = binaryString.length;\n    const bytes = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    return new Uint8Array(bytes).buffer;\n  }\n\n}\n\nEncryptionService.ɵfac = function EncryptionService_Factory(t) {\n  return new (t || EncryptionService)();\n};\n\nEncryptionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EncryptionService,\n  factory: EncryptionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/src/app/services/encryption.service.ts"],"names":["i0","EncryptionService","constructor","encryptCreditCard","creditCardModel","publicKey","cryptoKey","importKey","encodedText","TextEncoder","encode","JSON","stringify","encryptedData","crypto","subtle","encrypt","name","btoa","String","fromCharCode","Uint8Array","keyBuffer","base64ToArrayBuffer","hash","base64","binaryString","window","atob","len","length","bytes","Array","i","charCodeAt","buffer","ɵfac","EncryptionService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,GAAG,CAAG;;AACXC,EAAAA,iBAAiB,CAACC,eAAD,EAAkBC,SAAlB,EAA6B;AAAA;;AAAA;AAChD;AACA,YAAMC,SAAS,SAAS,KAAI,CAACC,SAAL,CAAeF,SAAf,CAAxB,CAFgD,CAGhD;;AACA,YAAMG,WAAW,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBC,IAAI,CAACC,SAAL,CAAeR,eAAf,CAAzB,CAApB,CAJgD,CAKhD;;AACA,YAAMS,aAAa,SAASC,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsB;AAC9CC,QAAAA,IAAI,EAAE;AADwC,OAAtB,EAEzBX,SAFyB,EAEdE,WAFc,CAA5B,CANgD,CAShD;;AACA,aAAOU,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoB,GAAG,IAAIC,UAAJ,CAAeR,aAAf,CAAvB,CAAD,CAAX;AAVgD;AAWnD,GAb0B,CAc3B;;;AACMN,EAAAA,SAAS,CAACF,SAAD,EAAY;AAAA;;AAAA;AACvB;AACA,YAAMiB,SAAS,SAASR,MAAM,CAACC,MAAP,CAAcR,SAAd,CAAwB,MAAxB,EAAgC,MAAI,CAACgB,mBAAL,CAAyBlB,SAAzB,CAAhC,EAAqE;AACzFY,QAAAA,IAAI,EAAE,UADmF;AAEzFO,QAAAA,IAAI,EAAE;AAFmF,OAArE,EAGrB,IAHqB,EAGf,CAAC,SAAD,CAHe,CAAxB;AAIA,aAAOF,SAAP;AANuB;AAO1B,GAtB0B,CAuB3B;;;AACAC,EAAAA,mBAAmB,CAACE,MAAD,EAAS;AACxB,UAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAArB;AACA,UAAMI,GAAG,GAAGH,YAAY,CAACI,MAAzB;AACA,UAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAd;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;AAC1BF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAWP,YAAY,CAACQ,UAAb,CAAwBD,CAAxB,CAAX;AACH;;AACD,WAAO,IAAIZ,UAAJ,CAAeU,KAAf,EAAsBI,MAA7B;AACH;;AAhC0B;;AAkC/BlC,iBAAiB,CAACmC,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAIrC,iBAAV,GAAP;AAAwC,CAAzG;;AACAA,iBAAiB,CAACsC,KAAlB,GAA0B,aAAcvC,EAAE,CAACwC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAExC,iBAAT;AAA4ByC,EAAAA,OAAO,EAAEzC,iBAAiB,CAACmC,IAAvD;AAA6DO,EAAAA,UAAU,EAAE;AAAzE,CAAtB,CAAxC","sourcesContent":["import * as i0 from \"@angular/core\";\nexport class EncryptionService {\n    constructor() { }\n    async encryptCreditCard(creditCardModel, publicKey) {\n        // Import the public key for encryption\n        const cryptoKey = await this.importKey(publicKey);\n        // Encode the credit card model as a JSON string and convert it to a Uint8Array\n        const encodedText = new TextEncoder().encode(JSON.stringify(creditCardModel));\n        // Encrypt the data using the RSA-OAEP algorithm\n        const encryptedData = await crypto.subtle.encrypt({\n            name: 'RSA-OAEP',\n        }, cryptoKey, encodedText);\n        // Convert the encrypted data to a base64-encoded string\n        return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n    }\n    // Import the public key for encryption\n    async importKey(publicKey) {\n        // Convert the base64-encoded public key to an ArrayBuffer\n        const keyBuffer = await crypto.subtle.importKey('spki', this.base64ToArrayBuffer(publicKey), {\n            name: 'RSA-OAEP',\n            hash: 'SHA-256',\n        }, true, ['encrypt']);\n        return keyBuffer;\n    }\n    // Convert a base64-encoded string to an ArrayBuffer\n    base64ToArrayBuffer(base64) {\n        const binaryString = window.atob(base64);\n        const len = binaryString.length;\n        const bytes = new Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return new Uint8Array(bytes).buffer;\n    }\n}\nEncryptionService.ɵfac = function EncryptionService_Factory(t) { return new (t || EncryptionService)(); };\nEncryptionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EncryptionService, factory: EncryptionService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}