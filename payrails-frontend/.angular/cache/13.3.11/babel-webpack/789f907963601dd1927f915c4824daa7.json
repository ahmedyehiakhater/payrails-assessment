{"ast":null,"code":"import _asyncToGenerator from \"/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PayrailsCSE } from '@payrails/web-cse';\nimport * as i0 from \"@angular/core\";\nexport class EncryptionService {\n  constructor(ngZone) {\n    this.ngZone = ngZone;\n  }\n\n  clientSideEncryption(creditCardModel) {\n    return _asyncToGenerator(function* () {\n      let initResponse = {\n        \"version\": \"1.0.0\",\n        \"data\": \"eyJ0b2tlbiI6ImV5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJbU5tT0RGak5USmxMVGN6WVRBdE5EQTBNQzA1WTJWaUxXRXdOMk16WVdZNE5qUm1PU0lzSW5SNWNDSTZJa3BYVkNKOS5leUpoZFdRaU9sc2ljR0Y1Y21GcGJITXRZbUZqYTJWdVpDSmRMQ0psZUhBaU9qRTJPVGcxT1RZd05qVXNJbWgwZEhCek9pOHZjR0Y1Y21GcGJITXVhVzh2WTJ4aGFXMXpMMk4xYzNSdmJWOXpZMjl3WlNJNkludGNJbUZzYkc5M2MwRnNiRndpT21aaGJITmxMRndpWlhobFkzVjBhVzl1U1dSY0lqcGNJbHdpTEZ3aWFHOXNaR1Z5VW1WbVpYSmxibU5sWENJNlhDSlFZWGx5WVdsc2N5QlFjbTlrZFdOMElHRnpjMlZ6YzIxbGJuUmNJaXhjSW5SdmEyVnVhWHBoZEdsdmJrbGtYQ0k2WENJNVltWTBaRGMxWmkwek16UTRMVFJoTkRVdE9ERTRNQzFqTlRobFpqazRNRGN6TlRWY0lpeGNJblI1Y0dWY0lqcGNJbU5zYVdWdWRGd2lmU0lzSW1semN5STZJbkJoZVhKaGFXeHpJaXdpYTJsa0lqb2lZMlk0TVdNMU1tVXROek5oTUMwME1EUXdMVGxqWldJdFlUQTNZek5oWmpnMk5HWTVJaXdpY0dWeWJXbHpjMmx2Ym5NaU9sc2lZMnhwWlc1ME9tVjRaV04xZEdsdmJuTTZZWFYwYUc5eWFYcGxJaXdpWTJ4cFpXNTBPbVY0WldOMWRHbHZibk02WTI5dVptbHliU0lzSW1Oc2FXVnVkRHBsZUdWamRYUnBiMjV6T25KbFlXUWlMQ0pqYkdsbGJuUTZhVzV6ZEhKMWJXVnVkSE02WTNKbFlYUmxJaXdpWTJ4cFpXNTBPbWx1YzNSeWRXMWxiblJ6T25SdmEyVnVhWHBsSWwwc0luTjFZaUk2SW0xbGNtTm9ZVzUwTFhOa2F5SjkuZ2VWTmxRdHU2OE1jc21ZemI3WGFRX2lRcnB2T0JVTmJzRVJVYjl3M09EOXJfMGZ2M0M0OEkxSExCQjkwekRKSkgxanRkRmo4a1lFUFdVNFZ5LVRER1lqZTcwWk5CUG1iZ3k4RDVIRWpONVRKeTl3SVdrMXpsbEl4TnVGNlE3MHF3dklUSWNYWnBwWHQ2blhKNWVTZE5pQU5UdTVRLXpuQkhIX3FmcHRPRTRfaWt1ZExCRThfZzVkUHBnZEFRcFF0am4yOV80OXhVMG1qZENHV2l0bXNvSHYyZXE1bnNmMjdHWkFRUERoZlFUT1RhckJPWThYb1h0MEQ3MlplNGpPaUx2SUFLek5BQ3lwZVVTZkNhd2tleWt4Q3h3SWxVQmxBY3hUUVRjWTRha05NTDRfcF90UUx5M3dCME9TXzlGbnYtQU1OSy0wb0I4bHhLSXRiNGZpNUdnIiwiaG9sZGVyUmVmZXJlbmNlIjoiUGF5cmFpbHMgUHJvZHVjdCBhc3Nlc3NtZW50IiwidG9rZW5pemF0aW9uIjp7ImlkIjoiOWJmNGQ3NWYtMzM0OC00YTQ1LTgxODAtYzU4ZWY5ODA3MzU1IiwicHVibGljS2V5IjoiTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEza09NOGZUWGE3b01kWXhHQ2E5dThaNnltMkxkY3p0Mng3a0FtSEtWOWpUOFlHN1BhR3h2NEU1blJqWm5UOU9VMGZaWkFHVUduZzFSRHJSYUNGd2NacE9ENW01NnNHMUxhWVE4ZGtheFNHMk0xQnluTGVLOVhSaVpFbXgxSmhEMFBrNG1tNXNJRklnM09hNDg2Q1dNVnJqZ0Nwc0YxVklnVDd5R29OT2s4dGRPcVBaMjA2QVRYZCs1QnhBclEzYXVwOXppRDBuc2s2NkNSY2hYVkNnRjdHYy95U0VzYytCM0doRjRxcUZTdlpiQUo0aEcxdWMxLzhHMlhiS29KSWRwZ2M0UWF2bnZ0QURBVEpCbXF5SGlvNzBkczc2Z1FKQU1zOHVNcGdOOUZPcVlxajVYU0VYOUsvV2JIUUJucWpCb3ByWlBuZ3E4aHpIdWtieDhYaHFyZlFJREFRQUIiLCJsaW5rcyI6eyJ0b2tlbml6ZSI6eyJtZXRob2QiOiJQT1NUIiwiaHJlZiI6Imh0dHBzOi8vcGF5cmFpbHMtYXBpLXB1Yi5zdGFnaW5nLnBheXJhaWxzLmlvL3B1YmxpYy9wYXltZW50L2luc3RydW1lbnRzL3Rva2VuaXplIn19fX0\"\n      };\n      const cse = PayrailsCSE.init(initResponse);\n      const tokenizedCard = yield cse.tokenize(creditCardModel);\n      console.log({\n        tokenizedCard\n      });\n    })();\n  }\n  /**\n   * The following is in case we need to encrypt using encryption algorithm RSA-OAEP-256 and content encryption A256CBC-HS512 but without JWE - this should be done strictly from server side\n   * @param creditCardModel\n   * @param publicKey\n   * @returns\n   */\n\n\n  encryptCreditCard(creditCardModel, publicKey) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const cryptoKey = yield _this.importKey(publicKey);\n      const encodedText = new TextEncoder().encode(JSON.stringify(creditCardModel)); // Use NgZone.run to ensure that change detection is aware of the asynchronous operation\n\n      return _this.ngZone.run( /*#__PURE__*/_asyncToGenerator(function* () {\n        const encryptedData = yield crypto.subtle.encrypt({\n          name: 'RSA-OAEP'\n        }, cryptoKey, encodedText);\n        return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n      }));\n    })();\n  } // Import the public key for encryption\n\n\n  importKey(publicKey) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Convert the base64-encoded public key to an ArrayBuffer\n      const keyBuffer = yield crypto.subtle.importKey('spki', _this2.base64ToArrayBuffer(publicKey), {\n        name: 'RSA-OAEP',\n        hash: 'SHA-256'\n      }, true, ['encrypt']);\n      return keyBuffer;\n    })();\n  } // Convert a base64-encoded string to an ArrayBuffer\n\n\n  base64ToArrayBuffer(base64) {\n    const binaryString = window.atob(base64);\n    const len = binaryString.length;\n    const bytes = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    return new Uint8Array(bytes).buffer;\n  }\n\n}\n\nEncryptionService.ɵfac = function EncryptionService_Factory(t) {\n  return new (t || EncryptionService)(i0.ɵɵinject(i0.NgZone));\n};\n\nEncryptionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EncryptionService,\n  factory: EncryptionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/ahmedyehiakhater/payrails-product-assessment/payrails-frontend/src/app/services/encryption.service.ts"],"names":["PayrailsCSE","i0","EncryptionService","constructor","ngZone","clientSideEncryption","creditCardModel","initResponse","cse","init","tokenizedCard","tokenize","console","log","encryptCreditCard","publicKey","cryptoKey","importKey","encodedText","TextEncoder","encode","JSON","stringify","run","encryptedData","crypto","subtle","encrypt","name","btoa","String","fromCharCode","Uint8Array","keyBuffer","base64ToArrayBuffer","hash","base64","binaryString","window","atob","len","length","bytes","Array","i","charCodeAt","buffer","ɵfac","EncryptionService_Factory","t","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { PayrailsCSE } from '@payrails/web-cse';\nimport * as i0 from \"@angular/core\";\nexport class EncryptionService {\n    constructor(ngZone) {\n        this.ngZone = ngZone;\n    }\n    async clientSideEncryption(creditCardModel) {\n        let initResponse = {\n            \"version\": \"1.0.0\",\n            \"data\": \"eyJ0b2tlbiI6ImV5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJbU5tT0RGak5USmxMVGN6WVRBdE5EQTBNQzA1WTJWaUxXRXdOMk16WVdZNE5qUm1PU0lzSW5SNWNDSTZJa3BYVkNKOS5leUpoZFdRaU9sc2ljR0Y1Y21GcGJITXRZbUZqYTJWdVpDSmRMQ0psZUhBaU9qRTJPVGcxT1RZd05qVXNJbWgwZEhCek9pOHZjR0Y1Y21GcGJITXVhVzh2WTJ4aGFXMXpMMk4xYzNSdmJWOXpZMjl3WlNJNkludGNJbUZzYkc5M2MwRnNiRndpT21aaGJITmxMRndpWlhobFkzVjBhVzl1U1dSY0lqcGNJbHdpTEZ3aWFHOXNaR1Z5VW1WbVpYSmxibU5sWENJNlhDSlFZWGx5WVdsc2N5QlFjbTlrZFdOMElHRnpjMlZ6YzIxbGJuUmNJaXhjSW5SdmEyVnVhWHBoZEdsdmJrbGtYQ0k2WENJNVltWTBaRGMxWmkwek16UTRMVFJoTkRVdE9ERTRNQzFqTlRobFpqazRNRGN6TlRWY0lpeGNJblI1Y0dWY0lqcGNJbU5zYVdWdWRGd2lmU0lzSW1semN5STZJbkJoZVhKaGFXeHpJaXdpYTJsa0lqb2lZMlk0TVdNMU1tVXROek5oTUMwME1EUXdMVGxqWldJdFlUQTNZek5oWmpnMk5HWTVJaXdpY0dWeWJXbHpjMmx2Ym5NaU9sc2lZMnhwWlc1ME9tVjRaV04xZEdsdmJuTTZZWFYwYUc5eWFYcGxJaXdpWTJ4cFpXNTBPbVY0WldOMWRHbHZibk02WTI5dVptbHliU0lzSW1Oc2FXVnVkRHBsZUdWamRYUnBiMjV6T25KbFlXUWlMQ0pqYkdsbGJuUTZhVzV6ZEhKMWJXVnVkSE02WTNKbFlYUmxJaXdpWTJ4cFpXNTBPbWx1YzNSeWRXMWxiblJ6T25SdmEyVnVhWHBsSWwwc0luTjFZaUk2SW0xbGNtTm9ZVzUwTFhOa2F5SjkuZ2VWTmxRdHU2OE1jc21ZemI3WGFRX2lRcnB2T0JVTmJzRVJVYjl3M09EOXJfMGZ2M0M0OEkxSExCQjkwekRKSkgxanRkRmo4a1lFUFdVNFZ5LVRER1lqZTcwWk5CUG1iZ3k4RDVIRWpONVRKeTl3SVdrMXpsbEl4TnVGNlE3MHF3dklUSWNYWnBwWHQ2blhKNWVTZE5pQU5UdTVRLXpuQkhIX3FmcHRPRTRfaWt1ZExCRThfZzVkUHBnZEFRcFF0am4yOV80OXhVMG1qZENHV2l0bXNvSHYyZXE1bnNmMjdHWkFRUERoZlFUT1RhckJPWThYb1h0MEQ3MlplNGpPaUx2SUFLek5BQ3lwZVVTZkNhd2tleWt4Q3h3SWxVQmxBY3hUUVRjWTRha05NTDRfcF90UUx5M3dCME9TXzlGbnYtQU1OSy0wb0I4bHhLSXRiNGZpNUdnIiwiaG9sZGVyUmVmZXJlbmNlIjoiUGF5cmFpbHMgUHJvZHVjdCBhc3Nlc3NtZW50IiwidG9rZW5pemF0aW9uIjp7ImlkIjoiOWJmNGQ3NWYtMzM0OC00YTQ1LTgxODAtYzU4ZWY5ODA3MzU1IiwicHVibGljS2V5IjoiTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEza09NOGZUWGE3b01kWXhHQ2E5dThaNnltMkxkY3p0Mng3a0FtSEtWOWpUOFlHN1BhR3h2NEU1blJqWm5UOU9VMGZaWkFHVUduZzFSRHJSYUNGd2NacE9ENW01NnNHMUxhWVE4ZGtheFNHMk0xQnluTGVLOVhSaVpFbXgxSmhEMFBrNG1tNXNJRklnM09hNDg2Q1dNVnJqZ0Nwc0YxVklnVDd5R29OT2s4dGRPcVBaMjA2QVRYZCs1QnhBclEzYXVwOXppRDBuc2s2NkNSY2hYVkNnRjdHYy95U0VzYytCM0doRjRxcUZTdlpiQUo0aEcxdWMxLzhHMlhiS29KSWRwZ2M0UWF2bnZ0QURBVEpCbXF5SGlvNzBkczc2Z1FKQU1zOHVNcGdOOUZPcVlxajVYU0VYOUsvV2JIUUJucWpCb3ByWlBuZ3E4aHpIdWtieDhYaHFyZlFJREFRQUIiLCJsaW5rcyI6eyJ0b2tlbml6ZSI6eyJtZXRob2QiOiJQT1NUIiwiaHJlZiI6Imh0dHBzOi8vcGF5cmFpbHMtYXBpLXB1Yi5zdGFnaW5nLnBheXJhaWxzLmlvL3B1YmxpYy9wYXltZW50L2luc3RydW1lbnRzL3Rva2VuaXplIn19fX0\"\n        };\n        const cse = PayrailsCSE.init(initResponse);\n        const tokenizedCard = await cse.tokenize(creditCardModel);\n        console.log({ tokenizedCard });\n    }\n    /**\n     * The following is in case we need to encrypt using encryption algorithm RSA-OAEP-256 and content encryption A256CBC-HS512 but without JWE - this should be done strictly from server side\n     * @param creditCardModel\n     * @param publicKey\n     * @returns\n     */\n    async encryptCreditCard(creditCardModel, publicKey) {\n        const cryptoKey = await this.importKey(publicKey);\n        const encodedText = new TextEncoder().encode(JSON.stringify(creditCardModel));\n        // Use NgZone.run to ensure that change detection is aware of the asynchronous operation\n        return this.ngZone.run(async () => {\n            const encryptedData = await crypto.subtle.encrypt({\n                name: 'RSA-OAEP',\n            }, cryptoKey, encodedText);\n            return btoa(String.fromCharCode(...new Uint8Array(encryptedData)));\n        });\n    }\n    // Import the public key for encryption\n    async importKey(publicKey) {\n        // Convert the base64-encoded public key to an ArrayBuffer\n        const keyBuffer = await crypto.subtle.importKey('spki', this.base64ToArrayBuffer(publicKey), {\n            name: 'RSA-OAEP',\n            hash: 'SHA-256',\n        }, true, ['encrypt']);\n        return keyBuffer;\n    }\n    // Convert a base64-encoded string to an ArrayBuffer\n    base64ToArrayBuffer(base64) {\n        const binaryString = window.atob(base64);\n        const len = binaryString.length;\n        const bytes = new Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return new Uint8Array(bytes).buffer;\n    }\n}\nEncryptionService.ɵfac = function EncryptionService_Factory(t) { return new (t || EncryptionService)(i0.ɵɵinject(i0.NgZone)); };\nEncryptionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EncryptionService, factory: EncryptionService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}